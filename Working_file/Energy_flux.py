import pandas as pd
import numpy as np
from PV import *
from Consumption import *

def consumer_profile (
    path, # path of customer data file
    pv_data,
    parameters = [1,30000,0.05,1400,4,7],
    cap_dy = 0,  #capacity_battery of battery dynamic
    c = 0
    ):

    """
    Input parameter:
    annual_consumption, unit KWh, annual_consumption is the total consumption of consumer
    pv, unit KWh, PV  has to be a np.array with length of 8760
    pv_consumer_percentage, from 0-1.
    capacity_battery, Wh, batter's capacity_battery
    deep_battery = 0.05,  batter discharge at most to capacity_battery*deep_battery of its capacity_battery
    bat_charge_speed = 1400, charging speed
    har_time_start = 4,  charging start time
    char_time_stop = 7,   charging stop time
    cap_dy = 0,  #capacity_battery of battery
    c=0, do not need to change


    Output parameter:
    data, the profile of consumer
    """
    pv_consumer_percentage = parameters[0]
    capacity_battery = parameters[1]
    deep_battery = parameters[2]
    bat_charge_speed = parameters[3]
    char_time_start = parameters[4] #charging start time
    char_time_stop = parameters[5]  #charging stop time
 
    data_all_or = customer_data_profile(path,pv_data)
    data_all_or_consumer = np.copy(data_all_or)
    for i in range(len(data_all_or)):
        data_all_or_consumer[i,2] = pv_consumer_percentage[i]*data_all_or[i,2]
        if data_all_or_consumer[i,2]-data_all_or_consumer[i,3]<0:
            data_all_or_consumer[i,4] = 0
        else:
            data_all_or_consumer[i,4]=data_all_or_consumer[i,2]-data_all_or_consumer[i,3]

    dis_deep = capacity_battery*deep_battery
    en_dump = [] #dumped energy
    en_battery_grid = [] #battery's energy from grid
    en_battery_pv = [] #battery's energy from PV
    battery_stat = []
    
    #power dynamic parameters
    use_power_pv = [] # the energy generated by pV and be used not dumped
    use_power_grid = [] # the energy comes from grid   
    
    for x in range(len(data_all_or_consumer)):
        if char_time_stop >= data_all_or_consumer [x,0] >= char_time_start: #battery at its charging time
            if data_all_or_consumer [x,4] > 0: #surplus >0
                if cap_dy < capacity_battery: #battery is not full
                    if data_all_or_consumer [x,4] > bat_charge_speed: #surplus > charging speed
                        if capacity_battery-cap_dy < bat_charge_speed: #full-capacity_battery now<speed
                            # battery parameters
                            en_dump.append(data_all_or_consumer [x,4] - (capacity_battery - cap_dy))
                            en_battery_grid.append(0)
                            en_battery_pv.append(capacity_battery - cap_dy)                  
                            # power paremeters
                            use_power_pv.append(data_all_or_consumer [x,2]-(data_all_or_consumer [x,4] - (capacity_battery - cap_dy)))
                            use_power_grid.append(0)
                            # battery cpacity
                            cap_dy = capacity_battery
                            battery_stat.append(cap_dy)
                        else: #full-capacity_battery now > speed
                            # battery parameters
                            en_dump.append(data_all_or_consumer [x,4]-bat_charge_speed)
                            en_battery_grid.append(0)
                            en_battery_pv.append(bat_charge_speed)
                            # power paremeters
                            use_power_pv.append(data_all_or_consumer [x,2]-(data_all_or_consumer [x,4]-bat_charge_speed))
                            use_power_grid.append(0)
                            # battery cpacity
                            cap_dy += bat_charge_speed
                            battery_stat.append(cap_dy)
                    else: #surplus <= charging speed
                        if capacity_battery-cap_dy < data_all_or_consumer [x,4]: #full-capacity_battery now<surplus
                            # battery parameters
                            en_battery_grid.append(0)
                            en_dump.append(data_all_or_consumer [x,4] - (capacity_battery - cap_dy))
                            en_battery_pv.append(capacity_battery - cap_dy)
                            # power paremeters
                            use_power_pv.append(data_all_or_consumer [x,2] - (data_all_or_consumer [x,4] - (capacity_battery - cap_dy)) )
                            use_power_grid.append(0)
                            # battery cpacity
                            cap_dy = capacity_battery
                            battery_stat.append(cap_dy)
                        else: #full-capacity_battery now > surplus
                            if capacity_battery-cap_dy < bat_charge_speed:  #full-capacity_battery now<speed
                                # battery parameters
                                en_dump.append(0)
                                en_battery_grid.append(capacity_battery-cap_dy-data_all_or_consumer [x,4])
                                en_battery_pv.append(data_all_or_consumer [x,4])
                                # power paremeters
                                use_power_pv.append(data_all_or_consumer [x,2])
                                use_power_grid.append(capacity_battery-cap_dy-data_all_or_consumer [x,4])
                                # battery cpacity
                                cap_dy = capacity_battery
                                battery_stat.append(cap_dy)
                            else: #full-capacity_battery now>speed
                                # battery parameters
                                en_dump.append(0)
                                en_battery_grid.append(bat_charge_speed-data_all_or_consumer [x,4])
                                en_battery_pv.append(data_all_or_consumer [x,4])
                                # power paremeters
                                use_power_pv.append(data_all_or_consumer [x,2])
                                use_power_grid.append(bat_charge_speed-data_all_or_consumer [x,4])
                                # battery cpacity
                                cap_dy += bat_charge_speed
                                battery_stat.append(cap_dy)                     
                else: #battery is full
                     # battery parameters
                     en_dump.append(data_all_or_consumer [x,4])
                     en_battery_grid.append(0)
                     en_battery_pv.append(0)
                     # power paremeters
                     use_power_pv.append(data_all_or_consumer [x,2]-data_all_or_consumer [x,4])
                     use_power_grid.append(0)
                     # battery cpacity
                     cap_dy = cap_dy
                     battery_stat.append(cap_dy)  
            else: #surplus = 0
                if cap_dy < capacity_battery: #battery is not full
                    if capacity_battery-cap_dy < bat_charge_speed: #full-capacity_battery now<speed
                        # battery parameters
                        en_dump.append(0)
                        en_battery_grid.append(capacity_battery-cap_dy)
                        en_battery_pv.append(0)
                        # power paremeters
                        use_power_pv.append(data_all_or_consumer [x,2])
                        use_power_grid.append(data_all_or_consumer [x,3]-data_all_or_consumer [x,2]+capacity_battery-cap_dy)
                        # battery cpacity
                        cap_dy=cap_dy
                        battery_stat.append(cap_dy)  
                    else: #full-capacity_battery now>=speed
                        # battery parameters
                        en_dump.append(0)
                        en_battery_grid.append(bat_charge_speed)
                        en_battery_pv.append(0)
                        # power paremeters
                        use_power_pv.append(data_all_or_consumer [x,2])
                        use_power_grid.append(data_all_or_consumer [x,3]-data_all_or_consumer [x,2]+bat_charge_speed)
                        # battery cpacity
                        cap_dy += bat_charge_speed
                        battery_stat.append(cap_dy)                 
                else: #battery is full
                        # battery parameters
                        en_dump.append(0)   
                        en_battery_grid.append(0)
                        en_battery_pv.append(0)
                        # power paremeters
                        use_power_pv.append(data_all_or_consumer [x,2])
                        use_power_grid.append(data_all_or_consumer [x,3]-data_all_or_consumer [x,2]+0)
                        # battery cpacity
                        cap_dy += 0
                        battery_stat.append(cap_dy)                 
        else:
            if data_all_or_consumer [x,4] >0: #surplus>0
                if cap_dy < capacity_battery: #battery not full
                    if data_all_or_consumer [x,4] > bat_charge_speed:  #surplus>charge speed 
                        if bat_charge_speed > capacity_battery - cap_dy:  #charge speed >full-cap_dy
                            # battery parameters
                            en_dump.append(data_all_or_consumer [x,4]-(capacity_battery - cap_dy))   
                            en_battery_grid.append(0)
                            en_battery_pv.append(capacity_battery - cap_dy)
                            # power paremeters
                            use_power_pv.append(data_all_or_consumer [x,2]-(data_all_or_consumer [x,4]-(capacity_battery - cap_dy)))
                            use_power_grid.append(0)
                            # battery cpacity
                            cap_dy = capacity_battery
                            battery_stat.append(cap_dy)    
                        else: #charge speed < full-cap_dy
                            # battery parameters
                            en_dump.append(data_all_or_consumer [x,4]-bat_charge_speed)   
                            en_battery_grid.append(0)
                            en_battery_pv.append(bat_charge_speed)
                            # power paremeters
                            use_power_pv.append(data_all_or_consumer [x,2]-(data_all_or_consumer [x,4]-bat_charge_speed))
                            use_power_grid.append(0)
                            # battery cpacity
                            cap_dy += bat_charge_speed
                            battery_stat.append(cap_dy)  
                    else: #surplus < charge speed 
                        if data_all_or_consumer [x,4] > capacity_battery - cap_dy: #surplus > full-cap_dy
                            # battery parameters
                            en_dump.append(data_all_or_consumer [x,4]-(capacity_battery - cap_dy))   
                            en_battery_grid.append(0)
                            en_battery_pv.append(capacity_battery - cap_dy)
                            # power paremeters
                            use_power_pv.append(data_all_or_consumer [x,2]-(data_all_or_consumer [x,4]-(capacity_battery - cap_dy)))
                            use_power_grid.append(0)
                            # battery cpacity
                            cap_dy = capacity_battery
                            battery_stat.append(cap_dy)
                        else: #surplus < full-cap_dy
                            # battery parameters
                            en_dump.append(0)   
                            en_battery_grid.append(0)
                            en_battery_pv.append(data_all_or_consumer [x,4])
                            # power paremeters
                            use_power_pv.append(data_all_or_consumer [x,2])
                            use_power_grid.append(0)
                            # battery cpacity
                            cap_dy += data_all_or_consumer [x,4]
                            battery_stat.append(cap_dy)
                else: #battery is full
                    # battery parameters
                    en_dump.append(data_all_or_consumer [x,4])   
                    en_battery_grid.append(0)
                    en_battery_pv.append(0)
                    # power paremeters
                    use_power_pv.append(data_all_or_consumer [x,2]-data_all_or_consumer [x,4])
                    use_power_grid.append(0)
                    # battery cpacity
                    cap_dy =  cap_dy
                    battery_stat.append(cap_dy)
            else: #surplus=0
                if cap_dy-dis_deep > 0: #battery can work
                    if cap_dy-dis_deep+data_all_or_consumer [x,2] > data_all_or_consumer [x,3] : #no grid comsunption
                        # battery parameters
                        en_dump.append(0)   
                        en_battery_grid.append(0)
                        en_battery_pv.append(0)
                        # power paremeters
                        use_power_pv.append(data_all_or_consumer [x,2])
                        use_power_grid.append(0)
                        # battery cpacity
                        cap_dy =  cap_dy-data_all_or_consumer [x,3]-dis_deep+data_all_or_consumer [x,2]
                        battery_stat.append(cap_dy)
                    else: #there is grid comsunption
                        # battery parameters
                        en_dump.append(0)   
                        en_battery_grid.append(0)
                        en_battery_pv.append(0)
                        # power paremeters
                        use_power_pv.append(data_all_or_consumer [x,2])
                        use_power_grid.append(data_all_or_consumer [x,3]-data_all_or_consumer [x,2]-(cap_dy-dis_deep))
                        # battery cpacity
                        cap_dy =  dis_deep
                        battery_stat.append(cap_dy)
                else: #battery can not work
                     # battery parameters
                    en_dump.append(0)   
                    en_battery_grid.append(0)
                    en_battery_pv.append(0)
                    # power paremeters
                    use_power_pv.append(data_all_or_consumer [x,2])
                    use_power_grid.append(data_all_or_consumer [x,3]-data_all_or_consumer [x,2])
                    # battery cpacity
                    cap_dy =  cap_dy
                    battery_stat.append(cap_dy)
                    
    use_power_pv=np.array(use_power_pv)
    use_power_grid=np.array(use_power_grid)
    battery_stat=np.array(battery_stat)
    en_battery_grid=np.array(en_battery_grid)
    en_batteryp_v=np.array(en_battery_pv)
    en_dump=np.array(en_dump)
    
    head=np.array(['time_day','hour','generation_pv','consumption','surplus','grid consumption','use_power_pv1','use_power_grid1',
                   'battery_stat1','en_battery_grid1', 'en_battery_pv1', 'en_dump1'])
    data_power_battery=np.transpose(np.vstack((use_power_pv,use_power_grid,battery_stat,en_battery_grid,en_batteryp_v,en_dump))) 
    data=np.vstack((head,np.hstack((data_all_or_consumer,data_power_battery))))

    return data
